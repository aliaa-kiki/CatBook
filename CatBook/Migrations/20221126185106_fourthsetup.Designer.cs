// <auto-generated />
using System;
using CatBook.Areas.Identity.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CatBook.Migrations
{
    [DbContext(typeof(catBookDbContext))]
    [Migration("20221126185106_fourthsetup")]
    partial class fourthsetup
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CatBook.Areas.Identity.Data.CatBookUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CatBookUser");
                });

            modelBuilder.Entity("catbook.Models.cat", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<string>("about")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("neutered")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("newUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("originalUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("photo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("vaccinated")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("vaccinationbook")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("newUserId");

                    b.HasIndex("originalUserId");

                    b.ToTable("cats");
                });

            modelBuilder.Entity("catbook.Models.catTrait", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<int>("catId")
                        .HasColumnType("int");

                    b.Property<int>("traitId")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("catId");

                    b.HasIndex("traitId");

                    b.ToTable("catTraits");
                });

            modelBuilder.Entity("catbook.Models.request", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<string>("contact")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("fromUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("toUserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("id");

                    b.HasIndex("fromUserId");

                    b.HasIndex("toUserId");

                    b.ToTable("requests");
                });

            modelBuilder.Entity("catbook.Models.trait", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("type")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.ToTable("traits");
                });

            modelBuilder.Entity("catbook.Models.cat", b =>
                {
                    b.HasOne("CatBook.Areas.Identity.Data.CatBookUser", "newUser")
                        .WithMany()
                        .HasForeignKey("newUserId");

                    b.HasOne("CatBook.Areas.Identity.Data.CatBookUser", "originalUser")
                        .WithMany()
                        .HasForeignKey("originalUserId");

                    b.Navigation("newUser");

                    b.Navigation("originalUser");
                });

            modelBuilder.Entity("catbook.Models.catTrait", b =>
                {
                    b.HasOne("catbook.Models.cat", "cat")
                        .WithMany("catTtraits")
                        .HasForeignKey("catId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("catbook.Models.trait", "trait")
                        .WithMany()
                        .HasForeignKey("traitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("cat");

                    b.Navigation("trait");
                });

            modelBuilder.Entity("catbook.Models.request", b =>
                {
                    b.HasOne("CatBook.Areas.Identity.Data.CatBookUser", "fromUser")
                        .WithMany()
                        .HasForeignKey("fromUserId");

                    b.HasOne("CatBook.Areas.Identity.Data.CatBookUser", "toUser")
                        .WithMany()
                        .HasForeignKey("toUserId");

                    b.Navigation("fromUser");

                    b.Navigation("toUser");
                });

            modelBuilder.Entity("catbook.Models.cat", b =>
                {
                    b.Navigation("catTtraits");
                });
#pragma warning restore 612, 618
        }
    }
}
